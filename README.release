* Change the version and date in cf/__init__.py (__version__ and
  __date__ variables)

* Make sure that README.md is up to date.

* Make sure that Changelog.rst is up to date.

* Check external links to the CF conventions are up to date in
  docs/source/tutorial.rst and docs/source/field_analysis.rst

* Create a link to the new documentation in docs/source/releases.rst

* Make sure that the Data tests are not commented out
  (cf/test/test_Data.py)
  
* Create a source tarball using `python setup.py sdist`

* Test the tarball release using `test_release <vn>`
  (e.g. ./test_release 3.0.5).

* Test tutorial code:

cd docs/source
./extract_tutorial_code
./reset_test_tutorial
cd test_tutorial
python ../tutorial.py

* Test cfa

mkdir delme.$$
for opt in vs vm vc
do
  echo $opt
  scripts/cfa    -$opt docs/source/sample_files/*[np][cp] >/dev/null
  scripts/cfa -1 -$opt docs/source/sample_files/*[np][cp] >/dev/null
  for f in docs/source/sample_files/*[np][cp]
  do
    echo $f
    scripts/cfa -$opt $f >/dev/null
    if [[ $opt == "vs" ]] ; then
      scripts/cfa --overwrite -o delme.nc $f
      scripts/cfa --overwrite -d delme.$$ $f
    fi
  done
done
scripts/cfa --overwrite -o delme.nc docs/source/sample_files/*[np][cp]
scripts/cfa --overwrite -d delme.$$ docs/source/sample_files/*[np][cp]
rm -fr delme.$$ delme.nc

* Update the latest documentation using `./release_latest_docs <vn>`
  (e.g. ./release_latest_docs 3.0.5)

* Create an archived copy of the documentation using
  `./release_archive_docs <vn>` (e.g. ./release_archive_docs 3.0.5)

* Update the beta documentation using `./release_beta_docs`

* Push recent commits using `git push origin master`

* Tag the release using `./tag <vn>` (e.g. ./tag 3.0.5)

* Upload the source tarball to PyPi

